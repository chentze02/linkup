{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachRecoveredProps = void 0;\nvar attachRecoveredProps = function attachRecoveredProps(props) {\n  try {\n    var _require = require('expo-error-recovery'),\n      recoveredProps = _require.recoveredProps;\n    return Object.assign({}, props, {\n      exp: Object.assign({}, props.exp, {\n        errorRecovery: recoveredProps\n      })\n    });\n  } catch (_unused) {}\n  return props;\n};\nexports.attachRecoveredProps = attachRecoveredProps;","map":{"version":3,"sources":["../../src/launch/RecoveryProps.ts"],"names":[],"mappings":";;;;AAEO,IAAM,oBAAoB,GAAG,SAAvB,oBAAoB,CAA4B,KAAQ,EAAO;EAC1E,IAAI;IAEF,eAA2B,OAAO,CAAC,qBAAqB,CAAC;MAAjD,cAAc,YAAd,cAAc;IACtB,yBACK,KAAK;MACR,GAAG,oBAAO,KAAK,CAAC,GAAG;QAAE,aAAa,EAAE;MAAc;IAAE;GAEvD,CAAC,gBAAM,CAAA;EAER,OAAO,KAAK;AACd,CAAC;AAAC","sourcesContent":["import { InitialProps } from './withExpoRoot.types';\n\nexport const attachRecoveredProps = <P extends InitialProps>(props: P): P => {\n  try {\n    // Optionally import expo-error-recovery\n    const { recoveredProps } = require('expo-error-recovery');\n    return {\n      ...props,\n      exp: { ...props.exp, errorRecovery: recoveredProps },\n    };\n  } catch {}\n\n  return props;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}