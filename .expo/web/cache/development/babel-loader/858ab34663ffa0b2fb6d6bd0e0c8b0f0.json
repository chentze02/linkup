{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ErroRecoveryStore = require(\"./ErroRecoveryStore\");\nvar _ExpoErrorRecovery = _interopRequireDefault(require(\"./ExpoErrorRecovery\"));\nif (_expoModulesCore.Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (error, isFatal) {\n      if (_ExpoErrorRecovery.default.saveRecoveryProps) {\n        yield _ExpoErrorRecovery.default.saveRecoveryProps((0, _ErroRecoveryStore.getRecoveryPropsToSave)());\n      }\n      globalHandler(error, isFatal);\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} else if (_expoModulesCore.Platform.OS === 'web' && _expoModulesCore.Platform.isDOMAvailable) {\n  window.addEventListener('error', function () {\n    _ExpoErrorRecovery.default.saveRecoveryProps((0, _ErroRecoveryStore.getRecoveryPropsToSave)());\n  });\n}","map":{"version":3,"sources":["../src/ErrorRecovery.fx.ts"],"names":[],"mappings":";;AAAA;AAEA;AACA;AAEA,IAAI,yBAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;EACzB,IAAM,aAAa,GAAG,UAAU,CAAC,gBAAgB,EAAE;EAGnD,UAAU,CAAC,gBAAgB;IAAA,2CAAC,WAAO,KAAK,EAAE,OAAO,EAAI;MACnD,IAAI,0BAAiB,CAAC,iBAAiB,EAAE;QACvC,MAAM,0BAAiB,CAAC,iBAAiB,CAAC,IAAA,yCAAsB,GAAE,CAAC;MACpE;MACD,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC;IAC/B,CAAC;IAAA;MAAA;IAAA;EAAA,IAAC;CACH,MAAM,IAAI,yBAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,yBAAQ,CAAC,cAAc,EAAE;EAC3D,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAK;IACpC,0BAAiB,CAAC,iBAAiB,CAAC,IAAA,yCAAsB,GAAE,CAAC;EAC/D,CAAC,CAAC;AACH","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}